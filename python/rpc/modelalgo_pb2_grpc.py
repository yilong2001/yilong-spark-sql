# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import modelalgo_pb2 as modelalgo__pb2


class ModelAlgorithmServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.sendBatch = channel.unary_unary(
        '/ModelAlgorithmService/sendBatch',
        request_serializer=modelalgo__pb2.ModelAlgorithmDataRequest.SerializeToString,
        response_deserializer=modelalgo__pb2.ModelAlgorithmResponse.FromString,
        )
    self.computeLR = channel.unary_unary(
        '/ModelAlgorithmService/computeLR',
        request_serializer=modelalgo__pb2.ModelAlgorithmComputeRequest.SerializeToString,
        response_deserializer=modelalgo__pb2.ModelAlgorithmResponse.FromString,
        )
    self.cleanBatch = channel.unary_unary(
        '/ModelAlgorithmService/cleanBatch',
        request_serializer=modelalgo__pb2.ModelAlgorithmCleanRequest.SerializeToString,
        response_deserializer=modelalgo__pb2.ModelAlgorithmResponse.FromString,
        )
    self.predict = channel.unary_unary(
        '/ModelAlgorithmService/predict',
        request_serializer=modelalgo__pb2.ModelAlgorithmPredictRequest.SerializeToString,
        response_deserializer=modelalgo__pb2.ModelPredictResponse.FromString,
        )


class ModelAlgorithmServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def sendBatch(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def computeLR(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cleanBatch(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def predict(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ModelAlgorithmServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'sendBatch': grpc.unary_unary_rpc_method_handler(
          servicer.sendBatch,
          request_deserializer=modelalgo__pb2.ModelAlgorithmDataRequest.FromString,
          response_serializer=modelalgo__pb2.ModelAlgorithmResponse.SerializeToString,
      ),
      'computeLR': grpc.unary_unary_rpc_method_handler(
          servicer.computeLR,
          request_deserializer=modelalgo__pb2.ModelAlgorithmComputeRequest.FromString,
          response_serializer=modelalgo__pb2.ModelAlgorithmResponse.SerializeToString,
      ),
      'cleanBatch': grpc.unary_unary_rpc_method_handler(
          servicer.cleanBatch,
          request_deserializer=modelalgo__pb2.ModelAlgorithmCleanRequest.FromString,
          response_serializer=modelalgo__pb2.ModelAlgorithmResponse.SerializeToString,
      ),
      'predict': grpc.unary_unary_rpc_method_handler(
          servicer.predict,
          request_deserializer=modelalgo__pb2.ModelAlgorithmPredictRequest.FromString,
          response_serializer=modelalgo__pb2.ModelPredictResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ModelAlgorithmService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
